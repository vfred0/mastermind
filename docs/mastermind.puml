@startuml mastermind
class Mastermind {
  - game: Game
  - view: View
  + play():void
}

class Game {

  - secret: SecretCombination
  - proposed: ProposedCombination[]
  - attempts: int
  - MAX_ATTEMPTS: int
  + reset(): void
  + init(): void
  + getAttempts(): int
  + getProposedCombination(int i): ProposedCombination
  + add(List<Color> colors): void
  + getResult(int i): Result
  + incrementAttempt(): void
  + finished(): boolean
  + isWinner(): boolean
}

class Combination {

  # {static} WIDTH: int
  # colors:List<Color>
  # haveColorsRepeat(String input): boolean
  # setColors(String input): void
  # charAt(String input, int i): String
  + {static} getCodeColors: String
}

class ProposedCombination {
  - isValid(String characters): boolean
  + getColors(): List<Color>
  + setColors(List<Color> colors): void
}

class SecretCombination {
  + equals(Combination proposed): boolean
  + getResult(Combination proposed): Result
}

class Result {
  - int whites
  - int blacks
  + Result(Combination proposed, Combination secret)
  + getWhites(): int
  + getBlacks(): int
}


enum Message{
  TITTLE
  ATTEMPTS
  RESULT
  PROPOSED
  SECRET
  WON
  LOOSE
}

enum Color{
  RED
  BLUE
  YELLOW
  GREEN
  ORANGE
  PURPLE

  + {static} getAll():List<Color>
  + {static} get(int i): Color
  + {static} getInitial(): String
  + {static} getAllInitials(List<Color> colors): String
  + {static} get(String characters): List<Color>
  + {static} String getAllInitials()
  + {static} charAt(String characters, int i): String

}

enum Error {
  REPEATED COLOR LENGTH NULL
  exists(): boolean
  getOrdinal(): int
}

class ErrorView {
  - messages: String[]
  + ErrorView(Error error)
}

class GameView{
  - write(Game game): void
}
class MessageView{
  - messages: String[]
  + MessageView(Message message)
  - getOrdinal(Message message): String
  + writeln(Message message: void
  + writeln(Message message, int attemp): void
  + writeln(Message message, int blacks, int whites): void
  + write(Message message): void
}


class PlayView {
  + PlayView(Game game)
  + play(): void
}


class ProposedCombinationView {
  ProposedCombinationView(ProposedCombination proposedCombination)
  + read(Game game): List<Color>
}

class ResumeView{
  ResumeView(Game game)
  + proceed(): boolean
}

class StartView{
  StartView(Game game)
  start(): void
}

abstract class View{
  + interact(Controller controller): void
}

class YesNoDialog{
  - exit: boolean
  YesNoDialog(Message resume)
  + isExit(): boolean
}

class ConsoleView {
  - StartView startView
  - PlayView playView
  - ResumeView resumeView

  + interact(Controller controller): void
  + visit(StartController controller): void
  + visit(PlayController controller): void
  + visit(ResumeController controller): void
  + visit(ElectionWidthCombinationController controller): void
}


abstract class Controller {
  # state: State
  # game: Game
  Controller(State state, Game game)
  {abstract} void accept(ControllerVisitor controllerVisitor)
  + next(): void

}


class ResumeController {
  + reset(): void
}

class StartController {

}

class PlayController {

  - secret: SecretCombination
  - proposed: ProposedCombination[]
  - attempts: int
  - MAX_ATTEMPTS: int
  + reset(): void
  + init(): void
  + getAttempts(): int
  + getProposedCombination(int i): ProposedCombination
  + add(List<Color> colors): void
  + getResult(int i): Result
  + incrementAttempts(): void
  + finished(): boolean
  + isWinner(): boolean
}


class Logic {
  - state: State
  - game: Game
  - startController: StartController
  - playController: PlayController
  - resumeController: ResumeController
  + geController(): Controller
}


interface ControllerVisitor {
  visit(StartController controller): void
  visit(PlayController controller): void
  visit(ResumeController controller): void
  visit(ElectionWidthCombinationController controller): void
}


Mastermind *--> Logic
Mastermind *--> View
Mastermind ..> Controller

View <|-- ConsoleView
ConsoleView *--> StartView
ConsoleView *--> PlayView
ConsoleView *--> ResumeView

StartView ..> MessageView
StartView ..> GameView
StartView ..> StartController

PlayView ..> ProposedCombinationView
PlayView ..> MessageView
PlayView ..> GameView
PlayView ..> Message
PlayView ..> PlayController

ResumeView ..> YesNoDialog
ResumeView ..> Message
ResumeView ..> ResumeController

YesNoDialog ..> MessageView
YesNoDialog ..> Message

ProposedCombinationView --> Game
ProposedCombinationView ..> MessageView
ProposedCombinationView ..> ErrorView
ProposedCombinationView ..> Color
ProposedCombinationView ..> Error
ProposedCombinationView ..> Message

MessageView ..> Message
MessageView ..> Console
ProposedCombinationView ..> Console
YesNoDialog ..> Console
ErrorView ..> Console
ErrorView ..> Error


Game *--> SecretCombination
Game *--> ProposedCombination
Game ..> Color
Game ..> Error

Combination *--> Color
Combination <|-- SecretCombination
Combination <|-- ProposedCombination

Result ..> Color
Result ..> Combination

SecretCombination ..> Result
SecretCombination ..> Color

ProposedCombination ..> Color

Controller <|-- PlayController
Controller <|-- StartController
Controller <|-- ResumeController

Logic *--> PlayController
Logic *--> StartController
Logic *--> ResumeController

ControllerVisitor <|-- View 
Controller ..> ControllerVisitor
PlayController <.. ControllerVisitor
StartController <.. ControllerVisitor
ResumeController <.. ControllerVisitor

PlayController <..  ConsoleView
StartController <.. ConsoleView
ResumeController <..ConsoleView

@enduml